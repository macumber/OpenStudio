This seems to fix issues described here: https://svn.boost.org/trac/boost/ticket/6659
That patch does not seem to have been accepted, but we are using crude a variation here.
diff -ur a/libs/filesystem/src/operations.cpp b/libs/filesystem/src/operations.cpp
--- a/libs/filesystem/src/operations.cpp	2015-01-26 14:31:23.000000000 -0600
+++ b/libs/filesystem/src/operations.cpp	2015-01-26 14:35:37.000000000 -0600
@@ -1397,25 +1397,7 @@
     else if (prms & remove_perms)
       prms = current_status.permissions() & ~prms;
 
-    // Mac OS X Lion and some other platforms don't support fchmodat().
-    // Solaris (SunPro and gcc) only support fchmodat() on Solaris 11 and higher,
-    // and a runtime check is too much trouble.
-    // Linux does not support permissions on symbolic links and has no plans to
-    // support them in the future.  The chmod() code is thus more practical,
-    // rather than always hitting ENOTSUP when sending in AT_SYMLINK_NO_FOLLOW.
-    //  - See the 3rd paragraph of
-    // "Symbolic link ownership, permissions, and timestamps" at:
-    //   "http://man7.org/linux/man-pages/man7/symlink.7.html"
-    //  - See the fchmodat() Linux man page:
-    //   "http://man7.org/linux/man-pages/man2/fchmodat.2.html"
-#   if defined(AT_FDCWD) && defined(AT_SYMLINK_NOFOLLOW) \
-      && !(defined(__SUNPRO_CC) || defined(sun)) \
-      && !(defined(linux) || defined(__linux) || defined(__linux__))
-      if (::fchmodat(AT_FDCWD, p.c_str(), mode_cast(prms),
-           !(prms & symlink_perms) ? 0 : AT_SYMLINK_NOFOLLOW))
-#   else  // fallback if fchmodat() not supported
-      if (::chmod(p.c_str(), mode_cast(prms)))
-#   endif
+    if (::chmod(p.c_str(), mode_cast(prms)))
     {
       if (ec == 0)
       BOOST_FILESYSTEM_THROW(filesystem_error(
